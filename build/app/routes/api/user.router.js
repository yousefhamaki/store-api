"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const user_controller_1 = __importDefault(require("../../controller/user.controller"));
const Authorization_middleware_1 = require("../../middleware/Authorization.middleware");
const Query_middleware_1 = __importDefault(require("../../middleware/Query.middleware"));
const ValidateToken_middleware_1 = __importDefault(require("../../middleware/ValidateToken.middleware"));
const userRequests_1 = __importDefault(require("../../requests/userRequests"));
const router = (0, express_1.Router)();
const controller = new user_controller_1.default();
const requests = new userRequests_1.default();
router.get("/info/:id", (0, Query_middleware_1.default)(requests.checkUuid), controller.getUser);
router.get("/search/email/:email", controller.searchEmail);
router.get("/search/username/:username", controller.searchUserName);
router.post("/create", (0, Query_middleware_1.default)(requests.createUser), controller.create);
router.post("/login", (0, Query_middleware_1.default)(requests.makeLogin), controller.login);
router.put("/change/:id", ValidateToken_middleware_1.default, Authorization_middleware_1.selfData, (0, Query_middleware_1.default)(requests.changePass), controller.changePass);
router.put("/change", ValidateToken_middleware_1.default, Authorization_middleware_1.selfData, (0, Query_middleware_1.default)(requests.updateUserInfo), controller.updateuserinfo);
router.delete("/delete/:id", (0, Query_middleware_1.default)(requests.checkUuid), ValidateToken_middleware_1.default, Authorization_middleware_1.selfData, controller.deleteUser);
router.post("/admin/adduser", ValidateToken_middleware_1.default, Authorization_middleware_1.isAdmin, (0, Query_middleware_1.default)(requests.createUser), controller.create);
router.delete("/admin/delete/:id", (0, Query_middleware_1.default)(requests.checkUuid), ValidateToken_middleware_1.default, Authorization_middleware_1.isAdmin, controller.deleteUser);
router.get("/admin/getall", ValidateToken_middleware_1.default, Authorization_middleware_1.isAdmin, controller.getAll);
exports.default = router;
